---

- name: Read variables from triliovault-nodes file
  include_vars: /etc/ansible/group_vars/triliovault-nodes
  tags:
    - daemon
    - proxy
    - clean-daemon

- name: Get ovirt-imageio tar file
  shell: cd /opt/ && { curl -k -O https://"{{ virtual_ip }}"/ovirt-imageio.tar.gz ; cd -;}
  tags:
    - daemon
    - proxy

- name: Check if redis service is running
  service:
    name: redis
    state: started
  register: redis_status
  tags: daemon

- name: Adding a redis config entry to not to save redis data
  command: redis-cli config set stop-writes-on-bgsave-error no
  tags: daemon

- name: Stopping playbook execution as redis in not installed
  fail: msg="Please install redis" 
  when: redis_status.state == "stopped"
  tags: daemon
   
- name: do the encode
  shell: echo {{ storage_nfs_export | b64encode }}
  register: encoded_nfs_share
  tags: 
    - daemon
    - clean-daemon

- set_fact:
    encoded_nfs_share: "{{ encoded_nfs_share.stdout }}"
  tags: 
    - daemon
    - clean-daemon

- name: Creating mount path
  set_fact:
    mount_path: "{{ vault_data_directory }}/{{ encoded_nfs_share }}"
  tags: 
    - daemon
    - clean-daemon

- name: Check mount point {{ mount_path }}
  command: mountpoint {{ mount_path }}
  register: mount_state
  failed_when: False
  changed_when: False
  tags: daemon

- name: debug
  when: mount_state.stdout == "{{ mount_path }} is a mountpoint"
  debug:
    msg: "{{ mount_path }} is a mountpoint"
  tags: daemon

- name: debug
  when: mount_state.stdout == "{{ mount_path }} is not a mountpoint"
  debug:
    msg: "{{ mount_path }} is not a mountpoint"
  tags: daemon

- name: Unmounting existing mount path
  mount: 
    path: "{{ mount_path }}"
    state: unmounted
  when: mount_state.stdout == "{{ mount_path }} is a mountpoint"
  tags: daemon

- name: Creating mount path directory if it does not exist
  file:
    path: "{{ mount_path }}"
    state: directory
    owner: vdsm
    group: kvm
    recurse: yes
  tags: daemon
  
- name: Mount NFS volume
  command: mount -t nfs {{ storage_nfs_export }} {{ mount_path }}
  tags: daemon


- name: Generating workload using UUID
  set_fact:
    workload_id: "{{ 1000 | random | to_uuid | lower }}"
    snapshot_id: "{{ 1000 | random | to_uuid | lower }}"
    vm: "{{ 1000 | random | to_uuid | lower }}"
    vm_resource: "{{ 1000 | random | to_uuid | lower }}"
  tags: daemon


- name: Checking NFS read/write permissions for VDSM user
  file:
    path: "{{ mount_path }}/workload_{{ workload_id }}/snapshot_{{ snapshot_id}}/vm_{{ vm }}/vm_resource_{{ vm_resource }}"
    state: file
    owner: vdsm
    group: kvm
    state: directory
  tags: daemon


- name: Creating test file to check permissions for VDSM user
  file: 
    path: "{{ mount_path }}/workload_{{ workload_id }}/snapshot_{{ snapshot_id}}/vm_{{ vm }}/vm_resource_{{ vm_resource }}/test"
    state: touch
    owner: vdsm
    group: kvm
  tags: daemon


- name: Remove directory struture created to test NFS validation
  file:
    path: "{{ mount_path }}/workload_{{ workload_id }}"
    state: absent
    owner: vdsm
    group: kvm
  tags: daemon


- name: Test for vdsm entry in /etc/sudoers 
  shell: grep "^vdsm ALL = NOPASSWD" /etc/sudoers
  register: test_sudoers
  ignore_errors: yes
  tags: daemon

- name: Adding vdsm entry in /etc/sudoers
  lineinfile:
    line: "vdsm ALL = NOPASSWD: ALL"
    insertafter: EOF
    dest: /etc/sudoers
  when: test_sudoers.stdout == ""
  tags: daemon
  
- name: Test for NFS mount entry in fstab 
  shell: grep "^{{ storage_nfs_export }} {{ mount_path }}" /etc/fstab
  register: test_grep
  ignore_errors: yes
  tags: daemon

- name: Adding NFS mount entry in fstab
  lineinfile:
    line: "{{ storage_nfs_export }} {{ mount_path }} nfs rw,nolock,soft,intr,timeo=180 36 36"
    insertafter: EOF
    dest: /etc/fstab
  when: test_grep.stdout == ""
  tags: daemon

- name: Append empty line to daemon config file
  lineinfile:
    line: ''
    insertafter: EOF
    dest: /etc/ovirt-imageio-daemon/daemon.conf
  with_items:
  - "\n"
  tags: daemon

- name: Append encoded nfs share to file
  lineinfile:
    line: "[nfs_config]"
    insertafter: EOF
    dest: /etc/ovirt-imageio-daemon/daemon.conf
  tags: daemon

- name: Append encoded nfs share to file
  lineinfile:
    line: "nfs_share = {{ storage_nfs_export }}"
    insertafter: EOF
    dest: /etc/ovirt-imageio-daemon/daemon.conf
  tags: daemon

- name: Append mount path to file
  lineinfile:
    line: "mount_path = {{ mount_path }}"
    insertafter: EOF
    dest: /etc/ovirt-imageio-daemon/daemon.conf
  tags: daemon

- name: Stop the existing ovirt-imageio-daemon service
  service:
    name: ovirt-imageio-daemon
    state: stopped
  ignore_errors: yes
  register: ovirt_imageio_daemon
  tags: 
    - daemon
    - clean-daemon

- name: Stop Celery worker daemon if already running
  service:
    name: ovirt_celery
    state: stopped
  ignore_errors: yes
  tags: 
    - daemon
    - clean-daemon

- debug:
    msg: "ovirt-imageio-daemon is stopped"
  ignore_errors: yes
  when: ovirt_imageio_daemon.state == "stopped"
  tags: daemon

- name: Add controller key to authorized_keys
  authorized_key:
    user: root
    state: present
    key: "{{ lookup('file', '~/.ssh/id_rsa.pub') }}"
  tags: daemon

- name: Remove imageio if already present
  file:
    path: /opt/ovirt-imageio
    state: absent
  tags: 
    - daemon
    - clean-daemon

- name: Untar ovirt-imageio tar file
  unarchive:
    src: /opt/ovirt-imageio.tar.gz
    dest: /opt
    copy: no
  tags: daemon

- name: Change directory permissions
  file:
    path: /opt/ovirt-imageio
    state: directory
    owner: vdsm
    group: kvm
    recurse: yes
  tags: daemon


- name: Create directory to record daemon logs
  file:
    path: /var/log/imageio_daemon
    state: directory
    owner: vdsm
    group: kvm
    recurse: yes
  tags: daemon
   
- name : create directory to record imageio-proxy logs
  file:
    path: /var/log/imageio_proxy
    state: directory
    owner: vdsm
    group: kvm
    recurse: yes
  tags: proxy


- name: Setup logrotate.d scripts
  template:
    src: logrotate.d.j2
    dest: "{{ logrotate_conf_dir }}{{ item.name }}"
  with_items: "{{ logrotate_scripts }}"
  when: logrotate_scripts is defined
  tags:
    - daemon
    - proxy

- name: Create directory to record logs
  file:
    path: /var/log/ovirt_celery
    state: directory
    owner: vdsm
    group: kvm
    recurse: yes
  tags: daemon




- name: Check if Daemon was already configured.
  stat:
    path: /usr/lib/systemd/system/ovirt-imageio-daemon-original.service
  register: stat_result
  tags: 
    - daemon
    - clean-daemon

- name: Check if Daemon was already configured.
  stat:
    path: /usr/lib/systemd/system/ovirt-imageio-daemon-original.service
  register: stat_result
  tags: daemon

- name: Rename existing ovirt-imageio service file to original before replacing
  copy:
    src: /usr/lib/systemd/system/ovirt-imageio-daemon.service
    dest: /usr/lib/systemd/system/ovirt-imageio-daemon-original.service
    remote_src: yes
  become: true
  when: stat_result.stat.exists == False
  tags: daemon

- name: Remove service file if already present
  file:
    path: /usr/lib/systemd/system/ovirt-imageio-daemon.service
    state: absent
  tags: 
    - daemon

# Added task to fix if user runs uninstallation for more that 1 time
- name: Remove service file if already present
  file:
    path: /usr/lib/systemd/system/ovirt-imageio-daemon.service
    state: absent
  when: stat_result.stat.exists == True
  tags:
    - clean-daemon

- name: Replace file with original contents
  copy:
    src: /usr/lib/systemd/system/ovirt-imageio-daemon-original.service
    dest: /usr/lib/systemd/system/ovirt-imageio-daemon.service
    remote_src: yes
  become: true
  when: stat_result.stat.exists == True
  tags: clean-daemon

- name: Remove original service file if already present
  file:
    path: /usr/lib/systemd/system/ovirt-imageio-daemon-original.service
    state: absent
  when: stat_result.stat.exists == True
  tags: clean-daemon

- name: Copy the ImageIO Daemon service file
  copy:
    src: /opt/ovirt-imageio/service-files/ovirt-imageio-daemon.service
    dest: /usr/lib/systemd/system/ovirt-imageio-daemon.service
    remote_src: yes
    mode: u=rw,g=r,o=r
  tags: daemon

- name: Activate the celery virtualenv
  shell: source /opt/ovirt-imageio/bin/activate
  tags: daemon

- name: Remove service file if already present
  file:
    path: /usr/lib/systemd/system/ovirt_celery.service
    state: absent
  tags: 
    - daemon
    - clean-daemon

- name: Copy the celery service file
  copy:
    src: /opt/ovirt-imageio/service-files/ovirt_celery.service
    dest: /usr/lib/systemd/system/ovirt_celery.service
    remote_src: yes
    owner: vdsm
    group: kvm
    mode: u=rw,g=r,o=r
  tags: daemon

- name: Systemctl daemon reload
  command: systemctl daemon-reload
  tags: 
    - daemon
    - clean-daemon

- name: Start ImageIO Daemon Service
  service:
    name: ovirt-imageio-daemon
    enabled: yes
    state: started
  tags: 
    - daemon
    - clean-daemon
  
- name: Start Celery worker service
  command: systemctl start ovirt_celery
  tags: daemon

- name: Enable Celery worker service
  command: systemctl enable ovirt_celery
  tags: daemon

- name: Unmounting existing mount path
  mount: 
    path: "{{ mount_path }}"
    state: unmounted
  tags: clean-daemon

- name: Remove NFS mount entry in fstab
  lineinfile:
    line: "{{ storage_nfs_export }} {{ mount_path }} nfs rw,nolock,soft,intr,timeo=180 36 36"
    state: absent
    dest: /etc/fstab
  tags: clean-daemon
  
# Proxy service deployment

- name: Stop the existing ImageIO Proxy service
  service:
    name: ovirt-imageio-proxy
    state: stopped
  ignore_errors: yes
  register: ovirt-imageio-proxy
  tags: 
    - proxy
    - clean-proxy

- name: Add controller key to authorized_keys
  authorized_key:
    user: root
    state: present
    key: "{{ lookup('file', '~/.ssh/id_rsa.pub') }}"
  tags: proxy

- name: Remove imageio if already present
  file:
    path: /opt/ovirt-imageio/
    state: absent
  tags: 
    - proxy
    - clean-proxy

- name: Untar ovirt-imageio tar file
  unarchive:
    src: /opt/ovirt-imageio.tar.gz
    dest: /opt
    copy: no
  tags: proxy

- name: Check if Proxy was already configured.
  stat:
    path: /usr/lib/systemd/system/ovirt-imageio-proxy-original.service
  register: stat_result
  tags: 
    - proxy
    - clean-proxy

- name: Check if Proxy was already configured.
  stat:
    path: /usr/lib/systemd/system/ovirt-imageio-proxy-original.service
  register: stat_result
  tags: proxy

- name: Rename existing ovirt-imageio-proxy service file to original before replacing
  copy:
    src: /usr/lib/systemd/system/ovirt-imageio-proxy.service
    dest: /usr/lib/systemd/system/ovirt-imageio-proxy-original.service
    remote_src: yes
  become: true
  when: stat_result.stat.exists == False
  tags: proxy

- name: Remove service file if already present
  file:
    path: /usr/lib/systemd/system/ovirt-imageio-proxy.service
    state: absent
  tags: 
    - proxy

# Added task to fix if user runs uninstallation for more that 1 time

- name: Remove service file if already present
  file:
    path: /usr/lib/systemd/system/ovirt-imageio-proxy.service
    state: absent
  when: stat_result.stat.exists == True
  tags:
    - clean-proxy

- name: Replace file with original contents
  copy:
    src: /usr/lib/systemd/system/ovirt-imageio-proxy-original.service
    dest: /usr/lib/systemd/system/ovirt-imageio-proxy.service
    remote_src: yes
  become: true
  when: stat_result.stat.exists == True
  tags: clean-proxy

- name: Remove service file if already present
  file:
    path: /usr/lib/systemd/system/ovirt-imageio-proxy-original.service
    state: absent
  when: stat_result.stat.exists == True
  tags:
    - clean-proxy

- name: Copy the service file
  copy:
    src: /opt/ovirt-imageio/service-files/ovirt-imageio-proxy.service
    dest: /usr/lib/systemd/system/ovirt-imageio-proxy.service
    remote_src: yes
    mode: u=rw,g=r,o=r
  tags: proxy

- name: Activate the virtualenv
  shell: source /opt/ovirt-imageio/bin/activate
  tags: proxy

- name: Systemctl daemon reload
  command: systemctl daemon-reload
  tags: 
    - proxy
    - clean-proxy

- name: Start ImageIO Proxy Service
  service:
    name: ovirt-imageio-proxy
    enabled: yes
    state: started
  tags: 
    - proxy
    - clean-proxy 

- name: Getting fqdn of host
  shell: python -c "import socket; print socket.gethostname()"
  register: fqdn
  tags: proxy

- name: Get IP from ovirt engine url
  shell: echo "{{ rhv_engine_url }}" | sed 's/https:\/\///'
  register: engine
  tags: proxy

- name: Removing trailing slash from engine url
  shell: echo "{{ engine.stdout }}" | sed -e 's#/$##'
  register: engine
  tags: proxy

- name: Removing existing host entry from /etc/hosts before adding new
  lineinfile:
    dest: /etc/hosts
    regexp: '^{{ engine.stdout }}'
    state: absent
  tags: proxy
  
- name: Adding fqdn value to /etc/hosts of TVM
  lineinfile:
    path: /etc/hosts
    regexp: '(^\s+{{ engine.stdout }}([\w=/\-\.\,\_]+)*)\s*$'
    line: "{{ engine.stdout }} {{ fqdn.stdout }}"
  delegate_to: 127.0.0.1
  tags: proxy
  
- name: Get rhvgui tar file
  shell: cd /usr/share/ovirt-engine/ui-plugins/ && { curl -k -O https://"{{ virtual_ip }}"/rhvgui.tar.gz ; cd -;}
  tags: proxy

- name: Untar rhvgui tar file
  unarchive:
    src: /usr/share/ovirt-engine/ui-plugins/rhvgui.tar.gz
    dest: /usr/share/ovirt-engine/ui-plugins
    copy: no
    extra_opts: [--strip-components=1]
  tags: proxy

- name: main | updating rhvgui config file
  action: template src=data.js.j2 dest=/usr/share/ovirt-engine/ui-plugins/trilio-plugin-resources/config/data.js
  tags:
    - proxy

- name: Removing ovirt-imageio tar file
  file:
    state: absent
    path: /opt/ovirt-imageio.tar.gz
  tags:
    - daemon
    - proxy

- name: Removing rhvgui tar file
  file:
    state: absent
    path: /usr/share/ovirt-engine/ui-plugins/rhvgui.tar.gz
  tags: proxy